{"design":{"lastTaskId":"d0a01de5-d9c4-4961-a3eb-c7470179e3a7","lastCheckpointId":"2b68bf85f6130e17916f3810eaaa23df0df07ec9","content":"# RooCode 插件技术设计文档\n\n## 1. 架构概述\n\n### 1.1 架构目标\n\n* 可扩展性: 支持未来 RooCode 功能扩展和新特性添加\n* 兼容性: 与现有 Cline 实现保持兼容，同时体现 RooCode 差异化\n* 可维护性: 遵循 OpenSpec 现有架构模式，便于维护和更新\n\n### 1.2 架构原则\n\n* 单一职责原则: 每个配置器专注于特定功能\n* 开闭原则: 对扩展开放，对修改封闭\n* 里氏替换原则: RooCode 配置器可替换 Cline 配置器\n* 接口隔离原则: 明确定义配置器接口\n* 依赖倒置原则: 依赖抽象而非具体实现\n\n## 2. 系统架构\n\n### 2.1 整体架构图\n\n```mermaid\ngraph TB\n    subgraph OpenSpec CLI\n        A[openspec init]\n        B[ToolRegistry]\n        C[SlashCommandRegistry]\n    end\n    \n    subgraph RooCode 配置器层\n        D[RooCodeConfigurator]\n        E[RooCodeSlashCommandConfigurator]\n    end\n    \n    subgraph 模板层\n        F[RooCodeTemplate]\n        G[SlashCommandTemplate]\n    end\n    \n    subgraph 文件系统\n        H[ROOCODE.md]\n        I[.roocoderules/]\n        J[openspec-proposal.md]\n        K[openspec-apply.md]\n        L[openspec-archive.md]\n    end\n    \n    A --> B\n    A --> C\n    B --> D\n    C --> E\n    D --> F\n    E --> G\n    F --> H\n    G --> I\n    I --> J\n    I --> K\n    I --> L\n```\n\n### 2.2 架构分层\n\n#### 2.2.1 配置器层\n\n* RooCodeConfigurator: 负责 ROOCODE.md 根配置文件生成\n* RooCodeSlashCommandConfigurator: 负责斜杠命令文件生成\n\n#### 2.2.2 模板层\n\n* RooCodeTemplate: 提供 RooCode 特定模板内容\n* SlashCommandTemplate: 提供通用斜杠命令模板\n\n#### 2.2.3 注册层\n\n* ToolRegistry: 管理工具配置器注册\n* SlashCommandRegistry: 管理斜杠命令配置器注册\n\n## 3. 服务设计\n\n### 3.1 核心组件\n\n| 组件名称 | 职责 | 技术栈 | 依赖 |\n|----------|------|--------|------|\n| RooCodeConfigurator | 管理 ROOCODE.md 配置文件 | TypeScript | ToolConfigurator 接口 |\n| RooCodeSlashCommandConfigurator | 管理 .roocoderules/ 目录 | TypeScript | SlashCommandConfigurator 基类 |\n| RooCodeTemplate | 提供 RooCode 模板内容 | TypeScript | TemplateManager |\n\n### 3.2 组件交互\n\n#### 3.2.1 初始化流程\n\n```mermaid\nsequenceDiagram\n    participant User\n    participant CLI\n    participant ToolRegistry\n    participant RooCodeConfigurator\n    participant SlashCommandRegistry\n    participant RooCodeSlashConfigurator\n    \n    User->>CLI: openspec init --tools roocode\n    CLI->>ToolRegistry: get('roocode')\n    ToolRegistry->>RooCodeConfigurator: configure()\n    RooCodeConfigurator->>RooCodeConfigurator: 创建 ROOCODE.md\n    CLI->>SlashCommandRegistry: get('roocode')\n    SlashCommandRegistry->>RooCodeSlashConfigurator: generateAll()\n    RooCodeSlashConfigurator->>RooCodeSlashConfigurator: 创建斜杠命令文件\n```\n\n#### 3.2.2 文件生成流程\n\n1. 用户执行初始化命令\n2. 系统查找 RooCode 配置器\n3. 生成根配置文件 ROOCODE.md\n4. 生成斜杠命令文件\n5. 注册到系统注册表\n\n### 3.3 API设计\n\n#### 3.3.1 RooCodeConfigurator\n\n* **接口**: ToolConfigurator\n* **方法**: configure(projectPath: string, openspecDir: string): Promise<void>\n* **配置文件**: ROOCODE.md\n\n#### 3.3.2 RooCodeSlashCommandConfigurator\n\n* **接口**: SlashCommandConfigurator\n* **方法**: generateAll(projectPath: string, openspecDir: string): Promise<string[]>\n* **文件路径**: \n  - `.roocoderules/openspec-proposal.md`\n  - `.roocoderules/openspec-apply.md`\n  - `.roocoderules/openspec-archive.md`\n\n## 4. 数据架构\n\n### 4.1 文件结构策略\n\n* 根配置文件: ROOCODE.md (项目根目录)\n* 斜杠命令目录: .roocoderules/ (项目根目录)\n* 模板文件: 集成在 TemplateManager 中\n\n### 4.2 数据一致性\n\n* 使用 OpenSpec 标记管理内容更新\n* 遵循现有文件更新机制\n* 保持与 Cline 实现的一致性\n\n## 5. 实现细节\n\n### 5.1 文件结构设计\n\n```\n项目根目录/\n├── ROOCODE.md                    # RooCode 根配置文件\n├── .roocoderules/                 # RooCode 规则目录\n│   ├── openspec-proposal.md      # 提案工作流\n│   ├── openspec-apply.md         # 实现工作流\n│   └── openspec-archive.md       # 归档工作流\n└── openspec/                     # OpenSpec 目录\n    ├── changes/\n    ├── specs/\n    └── ...\n```\n\n### 5.2 模板内容设计\n\n#### 5.2.1 ROOCODE.md 模板\n\n```markdown\n# RooCode Instructions\n\nThese instructions are for RooCode AI assistant working in this project.\n\nAlways open `@/openspec/AGENTS.md` when the request:\n- Mentions planning or proposals (words like proposal, spec, change, plan)\n- Introduces new capabilities, breaking changes, architecture shifts, or big performance/security work\n- Sounds ambiguous and you need the authoritative spec before coding\n\nUse `@/openspec/AGENTS.md` to learn:\n- How to create and apply change proposals\n- Spec format and conventions\n- Project structure and guidelines\n\nKeep this managed block so 'openspec update' can refresh the instructions.\n```\n\n#### 5.2.2 斜杠命令模板\n\n基于现有 slash-command-templates.ts，使用相同的模板内容，但适配 RooCode 的文件路径格式。\n\n### 5.3 注册机制设计\n\n#### 5.3.1 工具注册表集成\n\n在 `src/core/config.ts` 的 AI_TOOLS 数组中添加：\n```typescript\n{ name: 'RooCode', value: 'roocode', available: true, successLabel: 'RooCode' }\n```\n\n#### 5.3.2 配置器注册\n\n在 `src/core/configurators/registry.ts` 中注册：\n```typescript\nimport { RooCodeConfigurator } from './roocode.js';\n\n// 在静态初始化块中添加\nconst roocodeConfigurator = new RooCodeConfigurator();\nthis.tools.set('roocode', roocodeConfigurator);\n```\n\n#### 5.3.3 斜杠命令注册\n\n在 `src/core/configurators/slash/registry.ts` 中注册：\n```typescript\nimport { RooCodeSlashCommandConfigurator } from './roocode.js';\n\n// 在静态初始化块中添加\nconst roocode = new RooCodeSlashCommandConfigurator();\nthis.configurators.set(roocode.toolId, roocode);\n```\n\n## 6. 技术选型\n\n### 6.1 核心技术\n\n* **语言**: TypeScript (与项目保持一致)\n* **框架**: 无额外框架依赖\n* **文件系统**: 使用现有的 FileSystemUtils\n\n### 6.2 设计模式\n\n* **策略模式**: 配置器实现不同的配置策略\n* **工厂模式**: 模板管理器创建不同类型模板\n* **注册表模式**: 统一管理配置器实例\n\n## 7. 兼容性设计\n\n### 7.1 与 Cline 的兼容性\n\n* 使用相同的接口定义\n* 复用相同的模板内容\n* 遵循相同的文件更新机制\n* 保持相同的注册流程\n\n### 7.2 差异化设计\n\n* 不同的文件路径 (.roocoderules/ vs .clinerules/)\n* 不同的根配置文件名 (ROOCODE.md vs CLINE.md)\n* 不同的工具标识符 ('roocode' vs 'cline')\n\n## 8. 扩展性考虑\n\n### 8.1 未来扩展点\n\n* 支持自定义 RooCode 特定功能\n* 支持 RooCode 独有的配置选项\n* 支持与 RooCode 生态系统的深度集成\n\n### 8.2 维护策略\n\n* 遵循现有代码风格和约定\n* 保持与主线代码的同步更新\n- 定期评估和优化实现"},"requirements":{"lastTaskId":"2491ca9b-7308-4669-bfed-cb1c20ce79c5","lastCheckpointId":"11f95bbfa10b48ffb561c2a9109cde4fafb61e4f","content":"# 需求规格说明书 - RooCode 插件支持\n\n## 1. 项目概述\n\n### 1.1 背景\n\nOpenSpec 是一个 CLI 工具，支持多种 AI 编程助手的配置。目前项目已支持 Cline（VS Code 扩展），现在需要添加对 RooCode 插件的支持。RooCode 是基于 Cline fork 开发的 AI 编程助手，具有相似的功能但可能有特定的配置需求和文件结构。\n\n### 1.2 目标\n\n为 OpenSpec 添加 RooCode 插件支持，使开发者能够使用 RooCode 的 AI 编程能力进行规范驱动的开发工作流。\n\n### 1.3 范围\n\n**包含内容**：\n- RooCode 工具配置器实现\n- RooCode 斜杠命令支持（proposal、apply、archive）\n- RooCode 根配置文件生成\n- 工具注册表集成\n\n**不包含内容**：\n- RooCode 本身的功能实现\n- 非 OpenSpec 相关的 RooCode 配置\n\n## 2. 功能需求\n\n### 2.1 用户角色\n\n| 角色名称 | 描述 | 权限 |\n|----------|------|------|\n| 开发者 | 使用 OpenSpec 和 RooCode 进行项目开发 | 配置工具、执行命令 |\n\n### 2.2 功能清单\n\n#### 2.2.1 RooCode 工具配置器\n\n- **需求ID**: FR-001\n- **需求描述**: 实现 RooCode 工具配置器，负责创建和管理 RooCode 的根配置文件\n- **优先级**: 高\n- **验收标准**: \n  1. 创建 `ROOCODE.md` 根配置文件\n  2. 文件包含 OpenSpec 工作流指令\n  3. 使用 OpenSpec 标记进行内容管理\n  4. 参考 `@/openspec/AGENTS.md` 获取工作流指令\n- **依赖关系**: 无\n\n#### 2.2.2 RooCode 斜杠命令配置器\n\n- **需求ID**: FR-002\n- **需求描述**: 实现 RooCode 斜杠命令配置器，支持 proposal、apply、archive 三个核心命令\n- **优先级**: 高\n- **验收标准**:\n  1. 创建 `.roocoderules/openspec-proposal.md` 文件\n  2. 创建 `.roocoderules/openspec-apply.md` 文件\n  3. 创建 `.roocoderules/openspec-archive.md` 文件\n  4. 每个命令包含适当的 Markdown 标题前置内容\n  5. 遵循已建立的斜杠命令模板模式\n- **依赖关系**: FR-001\n\n#### 2.2.3 工具注册表集成\n\n- **需求ID**: FR-003\n- **需求描述**: 将 RooCode 注册到 OpenSpec 的工具和斜杠命令注册表中\n- **优先级**: 高\n- **验收标准**:\n  1. 在 `ToolRegistry` 中注册 RooCode 配置器\n  2. 在 `SlashCommandRegistry` 中注册 RooCode 斜杠命令配置器\n  3. 在 `AI_TOOLS` 配置中添加 RooCode 选项\n  4. 确保 RooCode 在初始化过程中可用\n- **依赖关系**: FR-001, FR-002\n\n#### 2.2.4 初始化集成\n\n- **需求ID**: FR-004\n- **需求描述**: 在 OpenSpec 初始化过程中支持 RooCode 工具选择\n- **优先级**: 中\n- **验收标准**:\n  1. 用户可以通过 `openspec init --tools roocode` 选择 RooCode\n  2. 在交互式初始化向导中显示 RooCode 选项\n  3. 正确处理 RooCode 的配置和文件生成\n- **依赖关系**: FR-003\n\n## 3. 用户故事\n\n### 3.1 初始化项目支持 RooCode\n\n**作为** 开发者\n**我想要** 在 OpenSpec 项目初始化时选择 RooCode 作为 AI 助手\n**以便于** 使用 RooCode 进行规范驱动的开发工作流\n\n**验收条件**:\n* 当我运行 `openspec init --tools roocode` 时，系统创建 RooCode 特定的规则文件\n* 并且在项目根目录创建 ROOCODE.md 文件，包含 OpenSpec 工作流指令\n* 并且 RooCode 被注册为可用的配置器\n\n### 3.2 使用 RooCode 斜杠命令\n\n**作为** 开发者\n**我想要** 使用 RooCode 的斜杠命令来执行 OpenSpec 工作流\n**以便于** 在 RooCode 环境中无缝使用 OpenSpec 功能\n\n**验收条件**:\n* 当 RooCode 规则配置完成后，`.roocoderules/openspec-proposal.md` 包含提案工作流和防护栏\n* 并且 `.roocoderules/openspec-apply.md` 包含实现工作流\n* 并且 `.roocoderules/openspec-archive.md` 包含归档工作流\n* 并且所有命令包含适当的标题和引用\n\n## 4. 数据需求\n\n### 4.1 数据实体\n\n- **RooCode 配置器**: 负责管理 RooCode 根配置文件\n- **RooCode 斜杠命令配置器**: 负责管理 RooCode 斜杠命令文件\n- **工具注册表**: 存储和管理所有可用工具配置器\n\n### 4.2 数据流\n\n1. 用户运行 `openspec init` 并选择 RooCode\n2. 系统创建 `.roocoderules/` 目录\n3. 系统生成三个斜杠命令文件（proposal、apply、archive）\n4. 系统在项目根目录创建 `ROOCODE.md` 文件\n5. 系统将 RooCode 注册到工具注册表中\n\n## 5. 假设和依赖\n\n### 5.1 假设\n\n- RooCode 使用与 Cline 相似的配置文件结构和规则目录\n- RooCode 支持 `.roocoderules/` 目录用于存储特定规则\n- RooCode 支持 Markdown 格式的配置文件\n\n### 5.2 依赖\n\n- OpenSpec 核心框架和配置系统\n- 现有的工具配置器基类和斜杠命令配置器基类\n- 文件系统工具和模板管理器"},"tasks":{"lastTaskId":"4fced951-2302-4f11-b9f1-71b05741c2ca","lastCheckpointId":"7d2e701939554b7267530918ac86fb6e4238b7eb","content":"# RooCode 插件支持实现任务清单\n\n## 任务规划\n\n- [x] 1. 实现【RooCode 工具配置器】功能子需求\n  - 创建 RooCodeConfigurator 类，继承 ToolConfigurator 接口\n  - 实现 configure 方法，生成 ROOCODE.md 根配置文件\n  - 集成 OpenSpec 工作流指令和标记管理\n  - 参考 @/openspec/AGENTS.md 获取工作流指令内容\n  - 确保生成的配置文件符合 RooCode 规范\n  - _需求：[FR-001]_\n\n- [x] 2. 实现【RooCode 斜杠命令配置器】功能子需求\n  - 创建 RooCodeSlashCommandConfigurator 类，继承 SlashCommandConfigurator 基类\n  - 实现 generateAll 方法，生成三个斜杠命令文件\n  - 创建 .roocoderules/openspec-proposal.md 文件，包含提案工作流\n  - 创建 .roocoderules/openspec-apply.md 文件，包含实现工作流\n  - 创建 .roocoderules/openspec-archive.md 文件，包含归档工作流\n  - 确保每个命令包含适当的 Markdown 标题前置内容\n  - 遵循已建立的斜杠命令模板模式\n  - _需求：[FR-002]_\n\n- [x] 3. 实现【工具注册表集成】功能子需求\n  - 在 src/core/config.ts 的 AI_TOOLS 配置中添加 RooCode 选项\n  - 在 src/core/configurators/registry.ts 中注册 RooCodeConfigurator\n  - 在 src/core/configurators/slash/registry.ts 中注册 RooCodeSlashCommandConfigurator\n  - 确保 RooCode 在初始化过程中可用\n  - 验证注册机制的正确性和完整性\n  - _需求：[FR-003]_\n\n- [x] 4. 实现【初始化集成】功能子需求\n  - 修改初始化流程，支持 RooCode 工具选择\n  - 实现 openspec init --tools roocode 命令支持\n  - 在交互式初始化向导中添加 RooCode 选项\n  - 确保正确处理 RooCode 的配置和文件生成\n  - 测试初始化流程的完整性和正确性\n  - _需求：[FR-004]_"},"version":"1.0.0","lastModified":"2025-10-21T10:58:21.520Z"}